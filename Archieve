/**
 * Program Name: RulesetTest.java
 * Purpose: A functioning game loop to test the base combat ruleset of a game.
 * Coder: Trigo, Murilo 
 * Date: Oct 25, 2015 
 */

import java.util.Scanner;
import java.util.Random;
public class RulesetTest
{
	
	/*******************************************************************************************
	 * Ruleset In Test
	 * 
	 * 3 Strength
	 * 30 Stamina
	 * 10 Focus
	 * Up to 10 Focus split among Offense and Defense
	 * Action cost is the difference and highest and lowest of these two (5/5 costs 0)
	 * Attacker's Offense Score - Target's Defense Score = To-Hit-Score
	 * Every Offense/Defense score equals 10% on the chance-to-hit calculation
	 * No negative effects on negative THS 
	 * Wound depends on Stregth and OFFENSE SCORE, not THS
	 * 
	 * Wound Table:
	 * Strength 3
	 * OS (8, 9 and 10) = Lethal
	 * OS (5, 6 and 7) = Major
	 * OS (1, 2, 3 and 4) = Minor
	 * 
	 * Strength 2
	 * OS (9 and 10) = Lethal
	 * OS (6, 7 and 8) = Major
	 * OS (1, 2, 3, 4 and 5) = Minor
	 * 
	 * Strength 1
	 * OS (10) = Lethal
	 * OS (7, 8 and 9) = Major
	 * OS (1, 2, 3, 4 ,5 and 6) = Minor
	 * 
	 *******************************************************************************************/
	
	@SuppressWarnings("unused")
	public static void main(String[] args)
	{	
		// Variable Declaration and Object Creation Section
		
		// Scanner Object
		Scanner input = new Scanner(System.in);
		Random dice = new Random();
		
		// Constant Variables
		int MAX_STRENGTH = 3,
			MIN_STRENGTH = 0,
			MAX_STAMINA = 30,
			MIN_STAMINA = -30,
			MAX_FOCUS = 10;
		
		// Game Variables
		int currentTurnNumber = 0,
			currentlyActivePlayer = 1;
		
		// Player 1 Constructor Variables
		int player1Current_Strength = MAX_STRENGTH,
			player1Current_Stamina = MAX_STAMINA,
			player1Current_Focus = MAX_FOCUS,
		
			player1NumberOfLightWounds = 0,
			player1NumberOfHeavyWounds = 0,
			player1NumberOfFatiguePoints = 0,
		
			player1CurrentActionOffensePoints = 0,
			player1CurrentActionDefensePoints = 0,
			
			player1CurrentToHitScore = 0;
			
			
		boolean player1HasLethalWound = false;

		
		// Player 2 Constructor Variables
		int player2Current_Strength = MAX_STRENGTH,
			player2Current_Stamina = MAX_STAMINA,
			player2Current_Focus = MAX_FOCUS,
			
			player2NumberOfLightWounds = 0,
			player2NumberOfHeavyWounds = 0,
			player2NumberOfFatiguePoints = 0,
		
			player2CurrentActionOffensePoints = 0,
			player2CurrentActionDefensePoints = 0,
			
			player2CurrentToHitScore = 0;		
				
		boolean player2HasLethalWound = false;	
		
		// Processing Section
		
		/*******************************************************
		 * For every process that will apply to both players 
		 * 
		 * Create every player variable for a third non-existing
		 * player (this should really be a class)
		 * 
		 * Create an if gate that decides which player will
		 * evaluated.
		 * 
		 * Copy the values of player 1 or 2 to the 3rd player
		 * 
		 * Loop as to process the 3rd player twice. Once it'll
		 * have the attributes of one player and the second one
		 * of the other one.	
		 * 
		 ********************************************************/
		
		// Main Game Loop
		
		boolean mainGameLoopFlag = true;
		
		while (mainGameLoopFlag)
		{
			// Current Turn value update
			currentTurnNumber++;
				
			// Win State Check
			
			/**************************************
			 * If a player has inflicted a lethal 
			 * wound on the other player, he wins.
			 * 
			 **************************************/
			
			if (player1HasLethalWound || player2HasLethalWound )
			{
				if (player1HasLethalWound && player2HasLethalWound)
				{
					// Draw Scenario. Both Players are lethaly wounded
					System.out.println("Both players were lethaly wounded!\nIt's a draw");
					break; // Breaking out of the mainGameLoop
					
				} // end if: Draw Scenario
				else if (player2HasLethalWound) 
				{
					// Player 2 has suffered a lethal wound. Player 1 wins.
					System.out.println("Player 2 was lethaly wounded!\nPlayer 1 wins");
					break; // Breaking out of the mainGameLoop
					
				} // end else-if: Player 1 Win scenario
				else
				{
					// If EITHER player1 or player2 HAVE suffered a lethal wound
					// But NOT BOTH or player2
					// then it must have been player1
					// This else stands for: else if (player1HasLethalWound)
					
					System.out.println("Player 1 was lethaly wounded!\nPlayer 2 wins");
					break; // Breaking out of the mainGameLoop
					
				}// end else: Player 2 Win scenario				
			}// end if: Win State Check
			
			
			// Implicit-draw Check
			
			/************************************************************
			 * In this build, if both players are down to 0 Strength, 
			 * there is no way to achieve an end state and end the game.
			 * 
			 ************************************************************/
			if (player1Current_Strength == 0 && player2Current_Strength == 0)
			{
				System.out.println("Neither man can finish the other!\nIt's a draw");
				break; // Breaking out of the mainGameLoop
				
			}// end if: Both players have 0 Strength
			
			for (currentlyActivePlayer = 1; currentlyActivePlayer < 3; currentlyActivePlayer ++)
			{	
				/*************************************************************************
				 * For this version, every action uses up to 10 Focus points and since
				 * the Stamina cost is the difference between the Offense and Defense
				 * scores, there is no reason not to use all 10 Focus points
				 * 
				 * Tell user how many Focus points are available and prompt user to input
				 * how many to use in the Offensive Score.
				 * 
				 * VALIDATE INPUT
				 * 
				 * Display how many are being used for Offense, how many for Defense 
				 * (which is 10 - Offense)
				 * 
				 * Store input for processing as a variable for each player
				 * 
				 *************************************************************************/
				
				if (currentlyActivePlayer == 1) // First loop will be player1
				{	
					// Initial Input Prompt
					System.out.println("\nPLAYER 1 TURN");
					System.out.print("How many of the 10 Focus Points would you like to dedicate to Offense? ");
									
					boolean inputIsInvalid = true; // Used for input validation
					do // Input Validation Loop
					{				
						player1CurrentActionOffensePoints = input.nextInt();
										
						if (player1CurrentActionOffensePoints <= 10 && player1CurrentActionOffensePoints >= 0)
						{
							inputIsInvalid = false; // Will break out of the loop
						}
						else
						{
							System.out.println("Invalid Input.\nPlease enter a whole number from 0 to 10 including");
							inputIsInvalid = true; // Will stay in the loop
						}
						
					}while (inputIsInvalid); // End do-while: Input validation
					
					// Input Storing
					player1CurrentActionDefensePoints = 10 - player1CurrentActionOffensePoints;
					
					// Stamina Consumption
					player1Current_Stamina -= Math.abs(player1CurrentActionDefensePoints - player1CurrentActionOffensePoints);
					
					// Debugg Message
					System.out.println("\nPLAYER 1 ACTION FOR THIS TURN\nOFFENSE: " + player1CurrentActionOffensePoints +
										"\nDEFENSE: " + player1CurrentActionDefensePoints);

				}// end if: currently Active player is player1 - Read Input
				else // This is the inputs for the second player
				{
					// Initial Input Prompt
					System.out.println("\nPLAYER 2 TURN");
					System.out.print("How many of the 10 Focus Points would you like to dedicate to Offense? ");
									
					boolean inputIsInvalid = true; // Used for input validation
					do // Input Validation Loop
					{				
						player2CurrentActionOffensePoints = input.nextInt();
										
						if (player2CurrentActionOffensePoints <= 10 && player2CurrentActionOffensePoints >= 0)
						{
							inputIsInvalid = false; // Will break out of the loop
						}
						else
						{
							System.out.println("Invalid Input.\nPlease enter a whole number from 0 to 10 including");
							inputIsInvalid = true; // Will stay in the loop
						}
						
					}while (inputIsInvalid); // End do-while: Input validation
					
					// Input Storing
					player2CurrentActionDefensePoints = 10 - player2CurrentActionOffensePoints;
					
					// Stamina Consumption
					player2Current_Stamina -= Math.abs(player2CurrentActionDefensePoints - player2CurrentActionOffensePoints);
					
					
					// Debugg Message
					System.out.println("\nPLAYER 2 ACTION FOR THIS TURN\nOFFENSE: " + player2CurrentActionOffensePoints +
										"\nDEFENSE: " + player2CurrentActionDefensePoints);
	
				}// end else: currently Active player is not player1, so it's player2 - Read Input
								
			}// end for: Players Input
			
		
			/*********************************************************************
			 * Processing Section
			 * 
			 * Calculate and store the To-Hit-Scores of each player.
			 * 
			 * Check for the easiest case first: both have the same Offense score.
			 * Roll the die for both and assign wounds, if any.
			 * 
			 * Else, check for the highest Offense Score. Which player has the 
			 * highest should be stored in a varaible, to be read later in an 
			 * if-else statement.
			 * 
			 * Do the roll for the player with the highest Offense score. Assign
			 * wounds as necessary
			 * 
			 * Update the other player's attributes based on the new wounds. This
			 * happens BEFORE THE ROLL FOR THE SLOWER PLAYER.
			 * 
			 * Do the roll for the second player. Assigned wounds as necessary.
			 * 
			 * Update the attributes for he player that attack first based on the
			 * new wounds.
			 * 
			 *********************************************************************/
			
			
			
			// Calculation of To-Hit-Scores, Action Stamina cost and Hit dice rolls
			
			
			
			// For Player 1
			
			// To-Hit-Score
			player1CurrentToHitScore = player1CurrentActionOffensePoints - player2CurrentActionDefensePoints;
			
			// Action Stamina Cost
			player1Current_Stamina -= Math.abs(player1CurrentActionOffensePoints - player1CurrentActionDefensePoints);
			
			// Dice Roll
			int player1HitRoll = dice.nextInt(10) +1; // Turns a 0 to 9 roll into a 1 to 10
			System.out.println("\nPLAYER 1 THS: " + player1CurrentToHitScore);
			System.out.println("PLAYER 1 HIT ROLL: " + player1HitRoll);
			
			// Dice Roll Success of Failure
			boolean didPlayer1RollHighEnough = player1CurrentToHitScore >= player1HitRoll;
			
			
			
			// For Player 2
			
			// To-Hit-Score
			player2CurrentToHitScore = player2CurrentActionOffensePoints - player1CurrentActionDefensePoints;
			
			// Action Stamina Cost
			player2Current_Stamina -= Math.abs(player2CurrentActionOffensePoints - player2CurrentActionDefensePoints);
			
			// Dice Roll
			int player2HitRoll = dice.nextInt(10) +1; // Turns a 0 to 9 roll into a 1 to 10
			System.out.println("\nPLAYER 2 THS: " + player2CurrentToHitScore);
			System.out.println("PLAYER 2 HIT ROLL: " + player2HitRoll);
			
			// Dice Roll Success of Failure
			boolean didPlayer2RollHighEnough = player2CurrentToHitScore >= player2HitRoll;
			
			
			
			// Only ONE of the following three cases should be executed per turn 
			// that is, per loop of the mainGameLoop)
			
			// If neither player has the priority
			if (player1CurrentActionOffensePoints == player2CurrentActionOffensePoints )
			{
			
				// START PLAYER 1 WOUND FLORWCHART
				
				if (player1Current_Strength == 3)
				{
					if (player1CurrentActionOffensePoints >= 8 && player1CurrentActionOffensePoints <= 10)
					{	
						player2HasLethalWound = true;	
						System.out.println("Lethal hit!");
						
					}// end if: High OS bracket
					else if (player1CurrentActionOffensePoints >= 5 && player1CurrentActionOffensePoints <= 7)
					{
						player2NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player1CurrentActionOffensePoints >= 1 && player1CurrentActionOffensePoints <= 4)
					{
						player2NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end if: Strength is 3
				
				
				else if (player1Current_Strength == 2)
				{
					if (player1CurrentActionOffensePoints == 9 && player1CurrentActionOffensePoints == 10)
					{
						player2HasLethalWound = true;	
						
					}// end if: High OS bracket
					else if (player1CurrentActionOffensePoints >= 6 && player1CurrentActionOffensePoints <= 8)
					{
						player2NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player1CurrentActionOffensePoints >= 1 && player1CurrentActionOffensePoints <= 5)
					{
						player2NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end else-if: Strength is 2
				
				
				else if (player1Current_Strength == 1)
				{
					if (player1CurrentActionOffensePoints == 10)
					{
						player2HasLethalWound = true;	
						
					}// end if: High OS bracket
					else if (player1CurrentActionOffensePoints >= 7 && player1CurrentActionOffensePoints <= 9)
					{
						player2NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player1CurrentActionOffensePoints >= 1 && player1CurrentActionOffensePoints <= 6)
					{
						player2NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end else-if: Strength is 1
				
				// END PLAYER 1 WOUND FLORWCHART
				
				
				
				
				// START PLAYER 2 WOUND FLORWCHART
				
				if (player2Current_Strength == 3)
				{
					if (player2CurrentActionOffensePoints >= 8 && player2CurrentActionOffensePoints <= 10)
					{	
						player1HasLethalWound = true;	
						System.out.println("Lethal hit!");
						
					}// end if: High OS bracket
					else if (player2CurrentActionOffensePoints >= 5 && player2CurrentActionOffensePoints <= 7)
					{
						player1NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player2CurrentActionOffensePoints >= 1 && player2CurrentActionOffensePoints <= 4)
					{
						player1NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end if: Strength is 3
				
				
				else if (player1Current_Strength == 2)
				{
					if (player2CurrentActionOffensePoints == 9 && player2CurrentActionOffensePoints == 10)
					{
						player1HasLethalWound = true;	
						
					}// end if: High OS bracket
					else if (player2CurrentActionOffensePoints >= 6 && player2CurrentActionOffensePoints <= 8)
					{
						player1NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player2CurrentActionOffensePoints >= 1 && player2CurrentActionOffensePoints <= 5)
					{
						player1NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end else-if: Strength is 2
				
				
				else if (player1Current_Strength == 1)
				{
					if (player2CurrentActionOffensePoints == 10)
					{
						player1HasLethalWound = true;	
						
					}// end if: High OS bracket
					else if (player2CurrentActionOffensePoints >= 7 && player2CurrentActionOffensePoints <= 9)
					{
						player1NumberOfHeavyWounds += 1;
						
					}// end else-if: Middle OS bracket
					else if (player2CurrentActionOffensePoints >= 1 && player2CurrentActionOffensePoints <= 6)
					{
						player1NumberOfLightWounds += 1;
						
					}// end else-if: Lower OS bracket
				}// end else-if: Strength is 1
				
				// END PLAYER 2 WOUND FLORWCHART
				
				
					
				/********************************************************************
				 * With wounds properly assigned, start the 
				 * wound penalty application as per:
				 * 
				 * (-3 Current and Max Stamina) per 1 Light Wound
				 * 
				 * (-3 Current and Max Stamina) && (-1 Strength) per Heavy Wound
				 * 
				 * 
				 *********************************************************************/
					
				
				
				
				
				
			}// end if: Player1 OS == Player2 OS
			
			
			
			
			else if (player1CurrentActionOffensePoints > player2CurrentActionOffensePoints)
			{
				
			}// end else if: Player1 OS is larget than Player2 OS
			else
			{
				
			}// end else: Player2 OS is different than Player1 OS, but ALSO NOT SMALLER. Then it must be larger.
			
		}// end while: mainGameLoop	
		
		// Program End feedback
		System.out.println("CLEAN RUN");
		input.close();
	}
	//end main
}
//end class
