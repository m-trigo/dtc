/**
 * Program Name: Main.java - Alpha 0.01b
 *
 * Purpose: 
 * A program that runs a simple game with the pre-defined ruleset
 * 
 * Coded By: Trigo, Murilo
 *
 * Creation Date: Dec 25, 2015 
 * 
 * Last Revision Date: 2015-12-31
 * 
 */

import java.util.Scanner;
public class Main
{
	public static void main(String[] args)
	{
		/*****************
		   Setup Section
		 *****************/
		
		// Scanner Object - Data Input
		Scanner input = new Scanner(System.in);
		
		// Game Variables
		final int NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE = 5,
				  MIN_SCORE_VALUE = 0,
				  MAX_SCORE_VALUE = 5;
		
		int numberOfEnemiesCurrentlyDefeated = 0;		
	
		// Player Object
		Character player = new Character();
		
		// Console Line Interface Assets
		String screenBreak = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
	
		/**************************
		   Pre-Input Instructions
		 **************************/
		
		System.out.println(screenBreak);
		System.out.println("\t\tDefend The City - Ver. 0.01b\n\n\n\n");
		
		
		/******************
		   Main Game Loop
		 ******************/
		
		boolean isGameOver = false; // Flags the start of the End-Game Section of the program
		
		do
		{
			// Pre-Encounter
			System.out.println(screenBreak);
			System.out.println("You have encountered an enemy solider!");
			
			// Generate a new enemy for the encounter
			Character enemy = new Character();
				
			// Encounter Loop
			
			boolean isEncounterOver = false;
			
			while ( !isEncounterOver)
			{	
				
				/** TURN / ACTIONS **/
				
				/** 1 - Decision Step **/
				
				// Enemy '"' A.I '"' - Even the quotes have quotes

				if (enemy.stamina > 0)
				{
					enemy.offenseScore = generateRandomNumber(MIN_SCORE_VALUE,MAX_SCORE_VALUE);
					enemy.defenseScore = generateRandomNumber(MIN_SCORE_VALUE,MAX_SCORE_VALUE);
					
					if ( (enemy.offenseScore + enemy.defenseScore) >= enemy.stamina )
					{
						// Last Wind Action
						enemy.offenseScore = MAX_SCORE_VALUE;
						enemy.defenseScore = MAX_SCORE_VALUE;
						
					}// end if: The enemy will use the last of its Stamina into a final desperate attack, going into Stamina deficit.
				
				}// end if: The enemy still has enough Stamina to act
				
				else
				{
					// Enemy Cannot Act
					enemy.offenseScore = MIN_SCORE_VALUE;
					enemy.defenseScore = MIN_SCORE_VALUE;
					
				}// end else: the enemy is out of Stamina
	
				
				// Player Score Inputs
				boolean isInputInvalid = true; // Start assuming the input is invalid
				int invalidatedInput;
				
				if (player.stamina > 0)
				{	
					
					/** Offense Score **/
					do
					{
						System.out.print("Enter your Offense Score for the turn: ");
						invalidatedInput = input.nextInt();
						input.nextLine(); // Buffer Flush

						if (invalidatedInput >= MIN_SCORE_VALUE && invalidatedInput <= MAX_SCORE_VALUE)
						{
							player.offenseScore = invalidatedInput;
							isInputInvalid = false;

						}// end if: User input is within the accepted range

						else
						{
							System.out.println("\nInvalid Input - Please enter a value between and including "
									+ MIN_SCORE_VALUE + " and " + MAX_SCORE_VALUE + ".\n");

						}// end else: Input was invalid

					}while (isInputInvalid); // end while loop: Validation for player OFFENSE SCORE input

					
					/** Defense Score **/
					isInputInvalid = true; // Otherwise it will accept invalid inputs
					do
					{
						System.out.print("Enter your Defense Score for the turn: ");
						invalidatedInput = input.nextInt();
						input.nextLine(); // Buffer Flush

						if (invalidatedInput >= MIN_SCORE_VALUE && invalidatedInput <= MAX_SCORE_VALUE)
						{
							player.defenseScore = invalidatedInput;
							isInputInvalid = false;

						}// end if: User input is within the accepted range

						else
						{
							System.out.println("\nInvalid Input\nPlease enter a value between and including "
									+ MIN_SCORE_VALUE + " and " + MAX_SCORE_VALUE + ".\n");

						}// end else: Input was invalid

					}while (isInputInvalid); // end while loop: Validation for player DEFENSE SCORE input

				}// end if: The player still has enough stamina to act
				
				else
				{
					System.out.println("You are out of Stamina!");
					player.offenseScore = MIN_SCORE_VALUE;
					player.defenseScore = MIN_SCORE_VALUE;
					
				}// end else: The player has no Stamina left to act
				
				// Draw Check
				// If both the player and the enemy have no Stamina left, the encounter but it does not 
				// as a defeated enemy
				
				if ( player.stamina <= 0 && enemy.stamina <= 0)
				{
					System.out.println("Both characters are out of Stamina - Draw!");
					break; // This will break out of the Encounter
					
				}// end if: Both the enemy and the player are out of Stamina - It's a draw
				
				/** 2 - Reaction Step **/
				
				System.out.println("\nPlayer: " + player.offenseScore + " / " + player.defenseScore);
				System.out.println("Enemy: " + enemy.offenseScore + " / " + enemy.defenseScore + "\n");
				
				if (player.offenseScore < enemy.offenseScore)
				{		
					System.out.print("Enter \"-1\" to forsake your Offense Score for the turn's action"
							+ "\nOr enter any other number to keep your current one\n");
					int userInput = input.nextInt();
					input.nextLine(); // Buffer Flush

					if (userInput == -1)
					{
						player.offenseScore = MIN_SCORE_VALUE;

					}// end if: player chose to forsake its Offense Score
					
				}// end if: The player has the lowest Offense Score
				
				/** 3 - Action Step **/
				
				player.consumeCurrentActionStamina();
				enemy.consumeCurrentActionStamina();
				
				/** 4 - Attack Step **/
				
				player.toHitScore = (player.offenseScore - enemy.defenseScore); // Dice Roll needed - Not true percentage chance
				enemy.toHitScore = (enemy.offenseScore - player.defenseScore); // Dice Roll needed - Not true percentage chance
				
				System.out.println("Player THS: " + player.toHitScore);
				System.out.println("Enemy THS: " + enemy.toHitScore + "\n");
				
				/** Damage Step **/ 
				
				if (enemy.offenseScore == player.offenseScore)
				{
					if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You defeated the enemy!");
						
					}// end if: Player character hit the enemy
					
					if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end if: Enemy character hit the player
					
				}// end if: Both characters have the same offense score this turn
				
				else if (enemy.offenseScore > player.offenseScore)
				{
					if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end if: Enemy character hit the player
					
					else if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end				
						System.out.println("You defeated the enemy!");
					
					}// end else if: The Enemy missed the Player, but the Player hit the Enemy
					
				}// end else if: Enemy and Player OS are not equal and Enemy OS is greater than the Player's
				
				else
				{
					if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You defeated the enemy!");
						
					}// end if: Player character hit the enemy
					
					else if (generateRandomNumber(MIN_SCORE_VALUE, (MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end else if: The Player missed the Enemy, but the Enemy character hit the player
					
				}// end else: Enemy and Player OS are not equal and Enemy OS is NOT greater than the Player's. Therefore The player OS is the largest.

			}// end while loop: Encounter
			
			// End-Game Check
			if ( player.isWounded || (numberOfEnemiesCurrentlyDefeated >= NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE))
			{
				isGameOver = true; // Flags the main game loop to end
				
			}// end if: player EITHER is NOT able to continue OR has defeated enough enemies
			
			else
			{
				// Player Rested before the next Encounter
				player.setStaminaToMax();
			
			}// end else: The Player is able to continue and has not yet defeated enough enemies

			
		}while ( !isGameOver );
		
		
		/***********************
		   End-Game Evaluation
		 ***********************/
		
		// Player Defeat Scenario
		if (player.isWounded) 
		{
			System.out.print("\nYou died and the city burned that night.\n\nThe End");
		
		}// end if: the player was lethalhy wounded
		
		// Player Victory Scenario
		else 
		{
			System.out.print("\nThe invading forces retreated and the city saw another dawn.\n\nThe End");
			
		}// end else: the main loop was broken, but the player was not wounded, therefore: player defeated enough enemies
		
		/*************
		   Post-Game 
		 *************/
		
		input.close(); // Scanner Object clean-up
		
		// End-of-Run Message
		System.out.println("\n\nGAME RUN END");
		
	}//end main method
	
	/**
	 * Method Name: generateRandomNumber()
	 * 
	 * Purpose:
	 * Static method that returns a random integer between and including two numbers.
	 * 
	 * Accepts: two integer values
	 * 
	 * Returns: one integer value 
	 * 
	 */
	
	public static int generateRandomNumber(int lowestValue, int highestValue)
	{
		int valueIntervalLength = highestValue - lowestValue + 1;	
		return (int)(Math.random()*valueIntervalLength) + lowestValue;
		
	}// end int returning static method: generateRandomNumber()
	
	/**
	 * Method Name: holdScreen()
	 * 
	 * Purpose:
	 * Static method that holds the program progress until the user provies a valid feed for 
	 * an nextLine() method call: "Press RETURN to continue"
	 * 
	 * Accepts: A Scanner object
	 * 
	 * Returns: Nothing
	 * 
	 */
	
	public static void holdScreen(Scanner scannerObject)
	{
		// String Assets
		String pressToContinue = "Press RETURN to continue...\n";	
		String screenBreak = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
		
		System.out.print(pressToContinue);
		@SuppressWarnings("unused")
		String tempString = scannerObject.nextLine(); // The Scanner object will hold the program flow until a EOL character is provided
		System.out.println(screenBreak + "\n");
	
	}// end void method holdScreen
	
}//end Main class
