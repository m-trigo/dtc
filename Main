/**
 * Program Name: Main.java
 *
 * Purpose: 
 * A program that runs a simple game with the pre-defined ruleset (ver. 1.0.2a)
 * https://github.com/sildurend/DTC/blob/master/README.md
 * 
 * Coded By: Trigo, Murilo
 *
 * Creation Date: Dec 25, 2015 
 * 
 * Last Revision Date: 2016-01-05
 * 
 */

import java.util.Scanner;
public class Main
{


	
	public static void main(String[] args)
	{
		
		/*****************
		   Setup Section
		 *****************/
		
		// Game Variables
		final int NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE = 5;
		
		 int numberOfEnemiesCurrentlyDefeated = 0,
				   turnCounter = 1;
		
		Scanner input = new Scanner(System.in); // Scanner Object - Data Input
			
		// Console Line Interface Assets
		String screenBreak = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			   offenseScoreInputPrompt = "Offense Score for the turn: ",
			   defenseScoreInputPrompt = "Defense Score for the turn: ";
		
		// Player Input Validation Objects
		IntRangeInputValidation offenseScoreValidation = new IntRangeInputValidation(input, offenseScoreInputPrompt, 
															Character.MIN_SCORE_VALUE, Character.MAX_SCORE_VALUE);
		IntRangeInputValidation defenseScoreValidation = new IntRangeInputValidation(input, defenseScoreInputPrompt, 
															Character.MIN_SCORE_VALUE, Character.MAX_SCORE_VALUE);
		// Player Object
		PlayableCharacter player = new PlayableCharacter(offenseScoreValidation, defenseScoreValidation);
		
		
		/**************************
		   Pre-Input Instructions
		 **************************/
		
		System.out.println(screenBreak);
		System.out.println("\t\tDefend The City - ver. 1.0.2a\n");
		
		
		/******************
		   Main Game Loop
		 ******************/
		
		boolean isGameOver = false; // Flags the start of the End-Game Section of the program
		
		do
		{
			// Pre-Encounter
			System.out.println(screenBreak);
			System.out.println("You have encountered an enemy solider!");
			
			// Encounter 
			EnemyCharacter enemy = new EnemyCharacter(); // Generate a new enemy for the encounter		
			boolean isEncounterOver = false; // Flags the end of the encounter
			turnCounter = 1; // Reset the turn counter back to 1 before each encounter
			
			while ( !isEncounterOver) // !
			{	
				/** TURN STRUCTURE **/
				
				System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TURN " + turnCounter + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				
				/** Step 1 **/
				
				// Check if either of the characters has any stamina left to go on
				if (CombatHandler.areBothCharactersOutOfStamina(player, enemy))
				{
					System.out.println("Both characters are out of stamina!");
					break; // This will break out of the Encounter
					
				}// end if: both characters are out of stamina
				
				else
				{
					CombatHandler.callScoreInputs(player, enemy);
				
				}// end else: one of both characters do have stamina left

				/** Step 2 **/
				
				CombatHandler.revealScoreInputs(player, enemy);
				
				
				// >>>>>>>>>>>>>>>> THE OFFER TO FORFEIT THE OFFENSE SCORE IS MISSING! <<<<<<<<<<<<<<<<<<<<<
				
				
				/** Step 3 **/
				
				CombatHandler.consumeStamina(player, enemy);
				
				/** Step 4 **/
				
				CombatHandler.calculateTHS(player, enemy);
				
				/** Step 5 **/ 
				
				if (enemy.offenseScore == player.offenseScore)
				{
					if (CombatHandler.didXhitY(player, enemy))
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You hit the enemy!");
						
					}// end if: Player character hit the enemy
					
					else
					{
						System.out.println("You missed the enemy!");
						
					}// end else: the player character missed the attack
					
					if (CombatHandler.didXhitY(enemy, player))
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("The enemy hit you!");
						
					}// end if: Enemy character hit the player
					
					else
					{
						System.out.println("The enemy missed you!");
						
					}// end else: the player character missed the attack
					
				}// end if: Both characters have the same offense score this turn
				
				else if (enemy.offenseScore > player.offenseScore)
				{
					if (CombatHandler.didXhitY(enemy, player))
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("The enemy hit you!");
						
					}// end if: Enemy character hit the player
					
					else if (CombatHandler.didXhitY(player, enemy))
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end				
						System.out.println("The enemy missed you!");
						System.out.println("You hit the enemy!");
					
					}// end else if: The Enemy missed the Player, but the Player hit the Enemy
					
					else
					{
						System.out.println("The enemy missed you!");
						System.out.println("You missed the enemy!");		
					
					}// end else: the enemy missed the player and the player missed the enemy
					
				}// end else if: Enemy and Player OS are not equal and Enemy OS is greater than the Player's
				
				else
				{
					if (CombatHandler.didXhitY(player, enemy))
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You hit the enemy!");
						
					}// end if: Player character hit the enemy
					
					else if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You missed the enemy!");
						System.out.println("The enemy hit you!");
						
					}// end else if: The player missed the Enemy, but the enemy character hit the player
					
					else
					{
						System.out.println("You missed the enemy!");
						System.out.println("The enemy missed you!");
						
					}// end else: The player missed the enemy and the enemy missed the player
					
				}// end else: Enemy and Player OS are not equal and Enemy OS is NOT greater than the Player's. Therefore The player OS is the largest.

				/** END OF TURN **/	
				turnCounter++;
				
			}// end while loop: Encounter
			
			// End-Game Check
			if ( player.isWounded || (numberOfEnemiesCurrentlyDefeated >= NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE))
			{
				isGameOver = true; // Flags the main game loop to end
				
			}// end if: player EITHER is NOT able to continue OR has defeated enough enemies
			
			else
			{
				// Player Rested before the next Encounter
				player.setStaminaToMax();
			
			}// end else: The Player is able to continue and has not yet defeated enough enemies

			
		}while ( !isGameOver );
		
		
		/***********************
		   End-Game Evaluation
		 ***********************/
		
		// Player Defeat Scenario
		if (player.isWounded) 
		{
			System.out.print("\nYou died and the city was overtaken.");
		
		}// end if: the player was lethalhy wounded
		
		// Player Victory Scenario
		else 
		{
			System.out.print("\nAfter a costly battle, the invading forces retreated.");
			
		}// end else: the main loop was broken, but the player was not wounded, therefore: player defeated enough enemies
		
		System.out.println("\n\nThe End");
		
		/*************
		   Post-Game 
		 *************/
		
		input.close(); // Scanner Object clean-up
		
	}//end main method
	
}//end Main class
