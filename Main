/**
 * Program Name: Main.java
 *
 * Purpose: 
 * A program that runs a simple game with the pre-defined ruleset (ver. 1.0.2a)
 * https://github.com/sildurend/DTC/blob/master/README.md
 * 
 * Coded By: Trigo, Murilo
 *
 * Creation Date: Dec 25, 2015 
 * 
 * Last Revision Date: 2016-01-04
 * 
 */

import java.util.Scanner;
public class Main
{

	// Game Variables
	final static int NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE = 5;
	
	static int numberOfEnemiesCurrentlyDefeated = 0,
			   turnCounter = 1;
	
	public static void main(String[] args)
	{
		
		/*****************
		   Setup Section
		 *****************/
		
		Scanner input = new Scanner(System.in); // Scanner Object - Data Input
			
		// Console Line Interface Assets
		String screenBreak = "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
			   offenseScoreInputPrompt = "Offense Score for the turn: ",
			   defenseScoreInputPrompt = "Defense Score for the turn: ";
		
		// Input Validation Objects
		IntRangeInputValidation offenseScoreValidation = new IntRangeInputValidation(input, offenseScoreInputPrompt, 
															Character.MIN_SCORE_VALUE, Character.MAX_SCORE_VALUE);
		IntRangeInputValidation defenseScoreValidation = new IntRangeInputValidation(input, defenseScoreInputPrompt, 
															Character.MIN_SCORE_VALUE, Character.MAX_SCORE_VALUE);
		// Player Object
		PlayableCharacter player = new PlayableCharacter(offenseScoreValidation, defenseScoreValidation);
		
		
		/**************************
		   Pre-Input Instructions
		 **************************/
		
		System.out.println(screenBreak);
		System.out.println("\t\tDefend The City - ver. 1.0.2a\n");
		
		
		/******************
		   Main Game Loop
		 ******************/
		
		boolean isGameOver = false; // Flags the start of the End-Game Section of the program
		
		do
		{
			// Pre-Encounter
			System.out.println(screenBreak);
			System.out.println("You have encountered an enemy solider!\n");
			
			// Encounter 
			Enemy enemy = new Enemy(); // Generate a new enemy for the encounter		
			boolean isEncounterOver = false; // Flags the end of the encounter
			turnCounter = 1; // Reset the turn counter back to 1 before each encounter
			
			while ( !isEncounterOver) // !
			{	
				/** TURN STRUCTURE **/
				
				System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ TURN " + turnCounter + " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				
				/** Step 1 **/

				// Enemy Score Inputs
				enemy.getScoreValues();
				
				if (player.stamina > 0)
				{	
					player.offenseScore = offenseScoreValidation.getValue();
					player.defenseScore = defenseScoreValidation.getValue();

				}// end if: The player still has enough stamina to act
				
				else
				{
					System.out.println("You are out of Stamina!");
					player.offenseScore = Character.MIN_SCORE_VALUE;
					player.defenseScore = Character.MIN_SCORE_VALUE;
					
				}// end else: The player has no Stamina left to act
				
				// Draw Check
				// If both the player and the enemy have no Stamina left, the encounter but it does not 
				// as a defeated enemy
				
				if ( player.stamina <= 0 && enemy.stamina <= 0)
				{
					System.out.println("Both characters are out of Stamina - Draw!");
					break; // This will break out of the Encounter
					
				}// end if: Both the enemy and the player are out of Stamina - It's a draw
				
				/** 2 - Reaction Step **/
				
				System.out.println("\nPlayer: " + player.offenseScore + " / " + player.defenseScore);
				System.out.println("Enemy: " + enemy.offenseScore + " / " + enemy.defenseScore + "\n");
				
				if (player.offenseScore < enemy.offenseScore)
				{		
					System.out.print("Enter \"-1\" to forsake your Offense Score for the turn's action"
							+ "\nOr enter any other number to keep your current one\n");
					int userInput = input.nextInt();
					input.nextLine(); // Buffer Flush

					if (userInput == -1)
					{
						player.offenseScore = Character.MIN_SCORE_VALUE;

					}// end if: player chose to forsake its Offense Score
					
				}// end if: The player has the lowest Offense Score
				
				/** 3 - Action Step **/
				
				player.consumeCurrentActionStamina();
				enemy.consumeCurrentActionStamina();
				
				/** 4 - Attack Step **/
				
				player.toHitScore = (player.offenseScore - enemy.defenseScore); // Dice Roll needed - Not true percentage chance
				enemy.toHitScore = (enemy.offenseScore - player.defenseScore); // Dice Roll needed - Not true percentage chance
				
				/** Damage Step **/ 
				
				if (enemy.offenseScore == player.offenseScore)
				{
					if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You defeated the enemy!");
						
					}// end if: Player character hit the enemy
					
					if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end if: Enemy character hit the player
					
				}// end if: Both characters have the same offense score this turn
				
				else if (enemy.offenseScore > player.offenseScore)
				{
					if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end if: Enemy character hit the player
					
					else if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end				
						System.out.println("You defeated the enemy!");
					
					}// end else if: The Enemy missed the Player, but the Player hit the Enemy
					
				}// end else if: Enemy and Player OS are not equal and Enemy OS is greater than the Player's
				
				else
				{
					if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < player.toHitScore)
					{
						enemy.isWounded = true;
						numberOfEnemiesCurrentlyDefeated++; // Running total for Win-State check
						isEncounterOver = true; // Flags encounter to end
						System.out.println("You defeated the enemy!");
						
					}// end if: Player character hit the enemy
					
					else if (CombatHandler.generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < enemy.toHitScore)
					{
						player.isWounded = true; // Flag for Lose-State check
						isEncounterOver = true;
						System.out.println("You died!");
						
					}// end else if: The Player missed the Enemy, but the Enemy character hit the player
					
				}// end else: Enemy and Player OS are not equal and Enemy OS is NOT greater than the Player's. Therefore The player OS is the largest.

				/** END OF TURN **/
				turnCounter++;
				
			}// end while loop: Encounter
			
			// End-Game Check
			if ( player.isWounded || (numberOfEnemiesCurrentlyDefeated >= NUMBER_OF_DEFEATED_ENEMIES_FOR_WIN_STATE))
			{
				isGameOver = true; // Flags the main game loop to end
				
			}// end if: player EITHER is NOT able to continue OR has defeated enough enemies
			
			else
			{
				// Player Rested before the next Encounter
				player.setStaminaToMax();
			
			}// end else: The Player is able to continue and has not yet defeated enough enemies

			
		}while ( !isGameOver );
		
		
		/***********************
		   End-Game Evaluation
		 ***********************/
		
		// Player Defeat Scenario
		if (player.isWounded) 
		{
			System.out.print("\nYou died and the city burned that night.\n\nThe End");
		
		}// end if: the player was lethalhy wounded
		
		// Player Victory Scenario
		else 
		{
			System.out.print("\nThe invading forces retreated and the city saw another dawn.\n\nThe End");
			
		}// end else: the main loop was broken, but the player was not wounded, therefore: player defeated enough enemies
		
		/*************
		   Post-Game 
		 *************/
		
		input.close(); // Scanner Object clean-up
		
		// End-of-Run Message
		System.out.println("\n\nGAME RUN END");
		
	}//end main method
	
}//end Main class
