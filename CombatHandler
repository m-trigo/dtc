/**
 * Class Name: CombatHandler.java
 *
 * Purpose: 
 * Holds combat variables and handles all combat claculations and outputs.
 * 
 * Last Revision: 2016-01-05
 * 
 */

public class CombatHandler
{
	/**
	 * Method Name: areBothCharactersOutOfStamina()
	 * 
	 * Purpose:
	 * Checks if both characters are out of stamina
	 * 
	 * Accepts: one Character object and one Enemy object
	 * 
	 * Returns: a boolean
	 * 
	 */
	
	public static boolean areBothCharactersOutOfStamina(PlayableCharacter playerCharacter, EnemyCharacter enemyCharacter)
	{
		return (playerCharacter.stamina <= 0 && enemyCharacter.stamina <= 0);
	
	}// end boolean returning method areBothCharactersOutOfStamina
	
	/**
	 * Method Name: callScoreInputs()
	 * 
	 * Purpose:
	 * Gets the Score Values for both characters engaged in combat
	 * 
	 * Accepts: one Character object and one Enemy object
	 * 
	 * Returns: Nothing
	 * 
	 */
	
	public static void callScoreInputs(PlayableCharacter playerCharacter, EnemyCharacter enemyCharacter)
	{	
		// Enemy Score Inputs
		if (enemyCharacter.stamina > 0)
		{
			enemyCharacter.getScoreValues();
			
		}// end if: The enemy character still has enough stamina to act
		
		else
		{
			// Enemy Cannot Act
			System.out.println("The enemy is out of stamina!\n");
			enemyCharacter.offenseScore = Character.MIN_SCORE_VALUE;
			enemyCharacter.defenseScore = Character.MIN_SCORE_VALUE;
			
		}// end else: the enemy is out of Stamina		
		
		// Player Score Inputs
		if (playerCharacter.stamina > 0)
		{	
			playerCharacter.inputOffenseScore();
			playerCharacter.inputDefenseScore();

		}// end if: The player still has enough stamina to act

		else
		{
			System.out.println("You are out of Stamina!\n");
			playerCharacter.offenseScore = Character.MIN_SCORE_VALUE;
			playerCharacter.defenseScore = Character.MIN_SCORE_VALUE;

		}// end else: The player has no Stamina left to act

	}// end void method startTurnStep1()
	
	/**
	 * Method Name: revealScoreInputs()
	 * 
	 * Purpose:
	 * Reveals the score values of both characters for the turn
	 * 
	 * Accepts: one Character object and one Enemy object
	 * 
	 * Returns: Nothing
	 * 
	 */
	
	public static void revealScoreInputs(PlayableCharacter playerCharacter, EnemyCharacter enemyCharacter)
	{
		System.out.println("\nPlayer: " + playerCharacter.offenseScore + " / " + playerCharacter.defenseScore);
		System.out.println("Enemy: " + enemyCharacter.offenseScore + " / " + enemyCharacter.defenseScore + "\n");
	
	}// end void method revealScoreInputs
	
	/**
	 * Method Name: consumeStamina()
	 * 
	 * Purpose:
	 * Adjust the stamina values of each character according to the action costs for the turn
	 * 
	 * Accepts: one Character object and one Enemy object
	 * 
	 * Returns: Nothing
	 * 
	 */
	
	public static void consumeStamina(PlayableCharacter playerCharacter, EnemyCharacter enemyCharacter)
	{
		playerCharacter.consumeCurrentActionStamina();
		enemyCharacter.consumeCurrentActionStamina();
	
	}// end void method consumeStamina
	
	/**
	 * Method Name: calculateTHS()
	 * 
	 * Purpose:
	 * Calculate the To Hit Scores of each character's action for the turn
	 * 
	 * Accepts: one Character object and one Enemy object
	 * 
	 * Returns: Nothing
	 * 
	 */
	
	public static void calculateTHS(PlayableCharacter playerCharacter, EnemyCharacter enemyCharacter)
	{
		playerCharacter.toHitScore = (playerCharacter.offenseScore - enemyCharacter.defenseScore); 
		enemyCharacter.toHitScore = (enemyCharacter.offenseScore - playerCharacter.defenseScore);
	
	}// end void method calculateTHS
	
	/**
	 * Method Name: didXhitY()
	 * 
	 * Purpose:
	 * Does the diceroll to check if one character hit another
	 * 
	 * Accepts: two Character objects
	 * 
	 * Returns: boolean
	 * 
	 */
	
	public static boolean didXhitY(Character attackingCharacter, Character defendingCharacter)
	{
		return generateRandomNumber(Character.MIN_SCORE_VALUE, (Character.MAX_SCORE_VALUE -1) ) < attackingCharacter.toHitScore;

	}// end boolean returning method didXhitY
		
	/**
	 * Method Name: generateRandomNumber()
	 * 
	 * Purpose:
	 * Static method that returns a random integer between and including two numbers.
	 * 
	 * Accepts: two integer values
	 * 
	 * Returns: one integer value 
	 * 
	 */
	
	public static int generateRandomNumber(int lowestValue, int highestValue)
	{
		int valueIntervalLength = highestValue - lowestValue + 1;	
		return (int)(Math.random()*valueIntervalLength) + lowestValue;
		
	}// end int returning static method: generateRandomNumber()
		
}//end CombatHandler class
